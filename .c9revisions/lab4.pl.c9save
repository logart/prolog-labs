{"ts":1356512261892,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,":- dynamic like/2.\n:- dynamic notlike/2.\n%% like('exotic', 'C').\n%% like('exotic', 'D').\n%% like('increment', 'C++').\n%% like('increment', 'D').\n%% like('OO', 'A').\n\n%% question('exotic', 'Do you like exotic languages?').\n%% question('increment', 'Do you like incrementing?').\n%% question('OO', 'Do you like OOP?').\n\n\n%% notlike(A,B) :- \\+ like(A,B).\n\nretractList([]).\nretractList([H|T]) :- retractall(like(_,H)), retractList(T).\n\ninsert(H,T,[H|T]).\n\nnonmember(A,[]).\nnonmember(A,[H|T]) :- A \\= H, nonmember(A,T).\n\nuniq([H|T], R) :- (nonmember(H,T) -> R=[H|T];R=T).\n\nsay([]) :- write('You should better go to learn some biology or chemistry.').\nsay([R]) :- write('The best choise for you will be \\''), write(R),write('\\' language.').\nsay([R|T]) :- write('The best choise for you will be one of the following languages: '), write([R|T]).\n\nanswer([]) :- findall(Next, like(_, Next), L), uniq(L, R), say(R);say([]).\nask(QL) :- findall(Q,(like(Q,_),nonmember(Q,QL)), [QHead|QTail]),\n                question(QHead, Text),\n                %% write([QHead|QTail]),\n                %% nl,\n                %% write(QL),\n                %% nl,\n                write(Text),\n                insert(QHead,QL,NewQL),\n                nl,\n                readln([Response]),\n                ( (Response == yes ; Response == y) -> \n                    findall(Next,like(QHead, Next), L),\n                    findall(Next1,(like(_, Next1),nonmember(Next1, L)), Ruha),\n                    %% write(L),nl,\n                    %% write(Ruha),nl,\n                    retractList(Ruha);\n                    \n                    findall(Next,like(QHead, Next), L),\n                    %% write(L),nl,\n                    retractList(L)\n                ),\n                ask(NewQL);answer([]).\n\nmain :-\n        nl,\n        write('Choose action:\\n'),\n        write('1. save current state\\n'),\n        write('2. find element\\n'),\n        write('3. add element\\n'),\n        write('4. remove element\\n'),\n        write('5. exit\\n'),\n        write('>>> '), \n        readln([X]),\n        switch(X) ; main.\n \nswitch(1):- qsave_program('lab2.out',[class(development),op(save),autoload(true),goal(init)]), main.\n \nswitch(2):- ask([]), main.\n \nswitch(3):- write('Type parent\\'s name: '), read_line_pls(P),\n                        write('Type child\\'s name: '), read_line_pls(C),\n                        assert(parent(P,C)), main.\n \nswitch(4):- write('Type element\\'s name: '), read_line_pls(A), retractall(parent(A,_)),retractall(parent(_,A)), main.\n       \nswitch(5):-     write('Bye.\\n'), halt, halt.\n\ninit :- [library(http/dcg_basics),library(dialect/sicstus)], consult('base.pl'), main."]],"start1":0,"start2":0,"length1":0,"length2":2657}]],"length":2657}
